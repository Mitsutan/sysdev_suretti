plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
//    id "com.google.gms.google-services"
}

apply from: project(':flutter_config').projectDir.getPath() + "/dotenv.gradle"

def keystorePropertiesFile = rootProject.file("key.properties") 

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}


def mapsApiKey = localProperties.getProperty("MAPS_API_KEY")


def dartDefines = [:];
if (project.hasProperty('dart-defines')) {
    // カンマ区切りかつBase64でエンコードされている dart-defines をデコードして変数に格納します。
    dartDefines = dartDefines + project.property('dart-defines')
        .split(',')
        .collectEntries { entry ->
            def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
            pair.length == 2 ? [(pair.first()): pair.last()] : [:]
        }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    namespace = "dev.mitsutan.sysdev_suretti"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        targetSdkVersion rootProject.ext.targetSdkVersion
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "dev.mitsutan.sysdev_suretti"
        minSdk = 21
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
//        resValue "string", "maps_api_key", MAPS_API_KEY

        resValue "string", "app_name", "${dartDefines.APP_NAME}"
        // resValue "string", "google_maps_api_key", "${dartDefines.GOOGLE_MAPS_API_KEY}"
        // resValue "string", "google_maps_api_key", "\"${System.getenv('GOOGLE_MAPS_API_KEY')}\""
        // buildConfigField "String", "GOOGLE_MAPS_API_KEY", "\"${Env.GOOGLE_MAPS_API_KEY}\""
        manifestPlaceholders = [
            MAPS_API_KEY: mapsApiKey,
            applicationName: "すれっち"
        ]

    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    buildTypes {
        release {
//            signingConfig = signingConfigs.debug
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            // signingConfig = signingConfigs.debug
            signingConfig = signingConfigs.release
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    // 他の依存関係
}

//apply plugin: 'com.google.gms.google-services'